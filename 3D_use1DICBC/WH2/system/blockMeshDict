/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// normal depth
depth 0.00798;
ndepth 24;
// circular block dimension
width #calc "$depth*2.0";

LX #calc "$width*7.0";
LZ #calc "$width*3.0";
XB #calc "$width*3.0";

// cylinder center
xCenterCoord #eval{$XB+$width/2.0};
zCenterCoord 0.0;

xn1  #eval{$XB-$width/2.0};
xn2  #eval{$XB-($width/sqrt(2.0)-$width/2.0)};
xn3  #eval{$XB};
xn4  #eval{$XB+($width/2.0-$width/2.0/sqrt(2.0))};
xn5  #eval{$XB+($width/2.0+$width/2.0/sqrt(2.0))};
xn6  #eval{$XB+($width)};
xn7  #eval{$XB+($width/2.0+$width/sqrt(2.0))};
xn8  #eval{$XB+($width*1.50)};
xn9  #eval{$LX};

zn1  #eval{$width/2.0/sqrt(2.0)};
zn2  #eval{$width/sqrt(2.0)};
zn3  #eval{$LZ};
// yn3  #calc "$width*6.0";

yn  #calc "$depth*5.50";

// alternatively, use value assignment for uneven grid
// use a coarse mesh for now
hrf 4.0;
NX1 #calc "round($ndepth*$xn1/$depth/$hrf)";
NX2 #calc "round($ndepth*($xn3-$xn1)/$depth/$hrf)";
// NX3 #calc "($xn3-$xn2)/$depth*$ndepth/$hrf";
// NX3 #calc "round($ndepth*($xn5-$xn4)/$depth/$hrf)";
NX3 #calc "round(2.0*$NX2)";
NX4 #calc "round($ndepth*($xn8-$xn6)/$depth/$hrf)";
NX5 #calc "round($ndepth*($xn9-$xn8)/$depth/$hrf)";

NZ1 #calc "round($zn2/$depth*$ndepth/$hrf)";
NZ2 #calc "round(($zn2-$zn1)/$depth*$ndepth/$hrf)";
NZ3 #calc "round(($zn3-$zn2)/$depth*$ndepth/$hrf)";
// NY3 #calc "($yn3-$yn2)/$depth*$ndepth/$hrf";

NY #calc "round(5.50*$ndepth)";

xe_front #calc "1.0";
ye_bottom 1;
ye_top 1;
xe_back #calc "1.0";
z_grading 1.0;

vertices
(
    //Y- plane (0-15)
    (0 0 0) // 0
    (0 0 $zn2) // 1
    (0 0 $zn3) // 2
    ($xn1 0 0) // 3
    ($xn3 0 0) // 4
    ($xn4 0 $zn1) // 5
    ($xn2 0 $zn2) // 6
    ($xn2 0 $zn3) // 7
    ($xn6 0 0) // 8
    ($xn5 0 $zn1) // 9
    ($xn7 0 $zn2) // 10
    ($xn7 0 $zn3) // 11
    ($xn8 0 0) // 12
    ($xn9 0 0) // 13
    ($xn9 0 $zn2) // 14
    ($xn9 0 $zn3) // 15

    //Y+ plane (16-31)
    (0 $yn 0) // 16
    (0 $yn $zn2) // 17
    (0 $yn $zn3) // 18
    ($xn1 $yn 0) // 19
    ($xn3 $yn 0) // 20
    ($xn4 $yn $zn1) // 21
    ($xn2 $yn $zn2) // 22
    ($xn2 $yn $zn3) // 23
    ($xn6 $yn 0) // 24
    ($xn5 $yn $zn1) // 25
    ($xn7 $yn $zn2) // 26
    ($xn7 $yn $zn3) // 27
    ($xn8 $yn 0) // 28
    ($xn9 $yn 0) // 29
    ($xn9 $yn $zn2) // 30
    ($xn9 $yn $zn3) // 31

);

blocks
(
    // special attention must be paid to the local corrdinate system of every hex!
    hex (0 3 19 16 1 6 22 17) ($NX1 $NY $NZ1) simpleGrading (1 1 1) // hex block 0
    hex (1 6 22 17 2 7 23 18) ($NX1 $NY $NZ3) simpleGrading (1 1 1) // hex block 1
    hex (3 4 20 19 6 5 21 22) ($NX2 $NY $NZ1) simpleGrading (1 1 1) // hex block 2
    hex (5 9 25 21 6 10 26 22) ($NX3 $NY $NX2) simpleGrading (1 1 1) // hex block 3
    hex (6 10 26 22 7 11 27 23) ($NX3 $NY $NZ3) simpleGrading (1 1 1) // hex block 4
    hex (8 12 28 24 9 10 26 25) ($NX2 $NY $NZ1) simpleGrading (1 1 1) // hex block 5
    hex (12 13 29 28 10 14 30 26) ($NX5 $NY $NZ1) simpleGrading (1 1 1) // hex block 6
    hex (10 14 30 26 11 15 31 27) ($NX5 $NY $NZ3) simpleGrading (1 1 1) // hex block 7

);

edges
(
    arc 4 5 origin ( $xCenterCoord 0.0 $zCenterCoord)
    arc 3 6 origin ( $xCenterCoord 0.0 $zCenterCoord)
    arc 5 9 origin ( $xCenterCoord 0.0 $zCenterCoord)
    arc 6 10 origin ( $xCenterCoord 0.0 $zCenterCoord)
    arc 9 8 origin ( $xCenterCoord 0.0 $zCenterCoord)
    arc 10 12 origin ( $xCenterCoord 0.0 $zCenterCoord)

    arc 20 21 origin ( $xCenterCoord $yn $zCenterCoord)
    arc 19 22 origin ( $xCenterCoord $yn $zCenterCoord)
    arc 21 25 origin ( $xCenterCoord $yn $zCenterCoord)
    arc 22 26 origin ( $xCenterCoord $yn $zCenterCoord)
    arc 25 24 origin ( $xCenterCoord $yn $zCenterCoord)
    arc 26 28 origin ( $xCenterCoord $yn $zCenterCoord)
);

boundary
(
    front
    {
        // type cyclic;
	    // neighbourPatch back;
        type symmetryPlane;
        faces
        (
            (0 3 19 16)
            (3 4 20 19)
            (24 28 12 8)
            (12 13 29 28)
        );
    }
    
    back
    {
        // type cyclic;
	    // neighbourPatch front;
        type patch;
        faces
        (
            (2 7 23 18)
            (7 11 27 23)
            (11 15 31 27)
        );
    }

    blockFaces
    {
        type wall;
        faces
        (
            (4 5 21 20)
            (5 9 25 21)
            (9 8 24 25)
        );
    }
    
    inlet
    {
        type patch;
        faces
        (
		(0 1 17 16)
		(1 2 18 17)
        );
    }

    outlet
    {
        type patch;
        faces
        (
		(13 14 30 29)
		(14 15 31 30)
        );
	
    }

    bottom
    {
        type wall;
        faces
        (
    		(0 3 6 1)
            (3 4 5 6)
            (1 6 7 2)
            (5 9 10 6)
            (6 10 11 7)
            (9 8 12 10)
            (12 13 14 10)
            (10 14 15 11)
        );
    }

    top
    {
        // type wall;
        type patch;
        faces
        (
            (16 19 22 17)
            (17 22 23 18)
            (19 20 21 22)
            (21 25 26 22)
            (22 26 27 23)
            (24 28 26 25)
            (28 29 30 26)
            (26 30 31 27)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
