/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
//     default             none;

    // div(rhoPhi,U)       Gauss linearUpwind grad(U);
    // div(phi,alpha)      Gauss vanLeer;
    // div(phirb,alpha)    Gauss linear;

    // "div\(phi,(k|omega)\)"      Gauss upwind;
    // div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

    // div(phi,s)   Gauss vanLeer;
    // div(phirb,s) Gauss linear;

    // div(rhoPhi,U)    Gauss upwind;
    // div(phi,alpha)   Gauss vanLeer;
    // div(phirb,alpha) Gauss linear;
    // div(phi,k)       Gauss upwind;
    // div(phi,omega)   Gauss upwind;
    // div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

//     div(rhoPhi,U)   Gauss upwind;
//     div(phi,alpha)  Gauss vanLeer;
//     div(phi,omega)  Gauss upwind;
//     div(phi,k)  Gauss upwind;
//     div(phirb,alpha) Gauss linear;
//     div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;

//     div(rhoPhi,U)    Gauss linear;
    div(rhoPhi,U)   Gauss linearUpwind grad(U);
    div(phi,alpha)   Gauss vanLeer;
    div(phirb,alpha) Gauss linear;
    div(phi,k)       Gauss upwind;
    div(phi,epsilon) Gauss upwind;
    div(phi,R)       Gauss upwind;
    div(R)           Gauss linear;
    div(phi,nuTilda) Gauss upwind;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    // default         Gauss linear corrected;
    default         Gauss linear limited corrected 0.333;
//     default         Gauss linear orthogonal;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
    method          meshWave;
}


// ************************************************************************* //
